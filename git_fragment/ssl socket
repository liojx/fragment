服务器端需要：
1、KeyStore： 其中保存服务器端的私钥
2、Trust KeyStore： 其中保存客户端的授权证书

客户端需要：
1、KeyStore：其中保存客户端的私钥
2、Trust KeyStore：其中保存服务端的授权证书

密钥和授权证书的生成方法：
使用Java自带的keytool命令，在命令行生成。
1、生成服务器端私钥kserver.keystore文件
keytool -genkey -alias serverkey -validity 1 -keystore kserver.keystore
2、根据私钥，导出服务器端安全证书
keytool -export -alias serverkey -keystore kserver.keystore -file server.crt
3、将服务器端证书，导入到客户端的Trust KeyStore中
keytool -import -alias serverkey -file server.crt -keystore tclient.keystore
4、生成客户端私钥kclient.keystore文件
keytool -genkey -alias clientkey -validity 1  -keystore kclient.keystore
5、根据私钥，导出客户端安全证书
keytool -export -alias clientkey -keystore kclient.keystore -file client.crt
6、将客户端证书，导入到服务器端的Trust KeyStore中
keytool -import -alias clientkey -file client.crt -keystore tserver.keystore
生成的文件分成两组，服务器端保存：kserver.keystore tserver.keystore 客户端保存：kclient.keystore  tclient.kyestore。
客户端采用kclient.keystore中的私钥进行数据加密，发送给服务端，服务器端采用tserver.keystore中的client.crt证书对数据解密，如果解密成功，证明消息来自可信的客户端，进行逻辑处理； 服务器端采用kserver.keystore中的私钥进行数据加密，发送给客户端，客户端采用tclient.keystore中的server.crt证书对数据解密，如果解密成功，证明消息来自可信的服务器端，进行逻辑处理。如果解密失败，那么证明消息来源错误。不进行逻辑处理。
SSL Socket双向认证的安全性：
（1）可以确保数据传送到正确的服务器端和客户端。
（2）可以防止消息传递过程中被窃取。
（3）防止消息在传递过程中被修改.。
在系统运行中可能出现以下情况：
（1）   服务器端、客户端都持有正确的密钥和安全证书，此时服务器端和客户端可以进行正常通信。
（2）   客户端的密钥和安全证书不正确，此时服务器端和客户端不可以进行正常通信。
（3）   客户端未持有密钥和安全证书，此时服务器端和客户端也不可以进行正常通信
