1. 加密
  保护数据的操作，使非法用户即便拿到了数据，若不解密也不知道其中的内容。加密这个动作保证的是数据的安全性。
2. 解密
  解密即是把加密的数据翻译成大家都能看懂的操作，是加密的逆操作。
3. 认证
  认证和加密是两个概念，认证是核实某人身份的真实性，认证成功后，给与这个人相应的权限。
4. 对称加密
  对称加密是一种很快速很简单的加密方式，加密和解密用相同的密钥，密钥越短，解密耗时越短，密钥越长，解密时间就越长。所以使用对称加密需要注意两个方面：
  一是如何平衡耗时和安全性。二是加解密双方需要如何传送和保管密钥，一旦密钥泄露，可是天大的事情。
5. 非对称加解密（公钥和私钥对）
  非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。私钥只能由一方安全保管，
  不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。
  RSA数字签名算法，历史二十年，经历无数攻击依然屹立不倒。
  公钥 ： 可以随便在网络上传输，也可以告知别人，大家都可以看得到。
  私钥 ： 自己的非常重要非常私密的。
  着重注意 ： 这个秘钥对中，如果使用任意一把来加密数据，那么只有使用另外一把才能解密数据。
  而用法有两种：
  第一种用法：公钥加密，私钥解密。---用于加解密
  第二种用法：私钥签名，公钥验签。---用于签名
  签章 ： 其实就是用私钥加密，对应的公钥解密的过程。为什么会出现签章这个过程？第一种情况：A要给B发密文，那么A肯定用B的公钥加密，然后B用自己私钥解密就
  可以。但是C也可以拿B的公钥加密，冒充A发给B，B用自己私钥解密，认为是A发的，所以就出现风险问题。第二种情况： A要给B发送明文，随便哪个人都可以冒充A给
  B发信息。所以，这两种情况B都无法认证A是否是真的A，那么签章就是避免冒充的。
6. 签章，也叫签名，也叫数字签名。
   数字签名的过程：
      A 要给 B 发送 一段明文，第一，如何避免有人冒充A？ 第二，如何避免A发送的内容没有被篡改过？
      第一步 ：明文 ---- 经过HASH算法 ---- 生成很短的消息摘要  为什么这么做？ 1. hash算法不可逆。 2.消息内容不重复，哪怕明文改一个字，重新hash后
      生成的摘要都和之前的不一样，目的就是防止明文内容被篡改。
      第二步 ：消息摘要 ---- A的私钥进行加密 ---- 得到A的数字签名（Signature），相当于古代A按的指拇印。
      第三步 ：把数字签名附加到明文信息中，传给B。
      B拿到这份信件后，同样需要做两件事，第一核实是否是A发过来的，第二，核实A发过来的内容没有被篡改。
      第四步 ： B用A的公钥对A的数字签名进行解密，解密成功，便确认是A发来的，不是C或者D冒充。接着，B 把明文再进行hash运算，和解密数字签名得到的
      消息摘要对比，如果一致，说明信件没有被篡改。
 7. 数字证书
    我们再来试想一个场景，A本来想把自己的公钥给B，用作他们的加解密，但是B没有拿到A的公钥前，有个别有用心的C冒充A，把C的公钥发给了B。此时B认为拿到了A
    的公钥，于是，他就用误认为A的公钥（实际是C的公钥）给A写信：我的银行密码是888888。C拦截到B的信件后，用自己的私钥就解密打开了。
    那么，如何避免公钥冒用呢？前面说到用签名的方式，可以验证发信人的真实身份。这里要避免公钥冒用，就产生了数字证书。
    数字证书的特点：
      i. 由专门的机构签发的数字证书才安全有效。
      ii、签发数字证书是收费的。
      iii、不会被冒充，安全可信。
      iv、数字证书有使用期限，过了使用期限，证书变为不可用。CA也可以在使用期内，对证书进行作废操作。
      v、CA的公钥已经集成到操作系统中了。
    生成数字证书的流程如下：
      i、持有人将公钥以及身份信息发送给权威机构。
      ii、权威机构负责对持有人的身份进行验证，确保公钥和持有人的信息准确无误。
      iii、权威机构使用自己私钥对持有人公钥进行数字签名，生成数字证书。
      iv、为了确保证书不被篡改，权威机构对数字证书进行hash计算（指纹算法），生成摘要（指纹），使用自己的私钥对摘要进行数字签名，放到数字证书中。
      v、对持有人收费。
    这样，就可以避免公钥被冒用。
    综上，私钥可以通过数字签名来保证自己的唯一和真实，公钥可以用权威机构颁发的数字证书来保证不会被冒用，就大大的增加了数据在网络上传送的安全性。
