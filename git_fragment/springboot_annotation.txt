@Retention  说明该注解类的生命周期
  SOURCE: 表明之保留在源文件中
  CLASS：表明保留在class文件中，一旦加载到JVM就被丢弃
  RUNTIME：注解保留在程序运行期，此时可通过反射获得定义在某个类上的所有注解

@Target 表明注解被声明在那些类之前
  TYPE: 注解只能声明在类上
  FIELD：注解声明在一个字段之前
  METHOD：注解声明在一个方法之前
  PARAMETER: 注解声明在一个参数之前
  CONSTRUCTOR: 注解声明在一个构造方法之前
  LOCAL_VARIABLE：说明该注解只能声明在一个局部变量前
  ANNOTATION_TYPE：说明该注解只能声明在一个注解类型前
  PACKAGE：说明该注解只能声明在一个包名前

@Component
  翻译注释：
  表明注释的类是一个‘Component’。
  在使用基于注释的配置和类路径扫描时，这些类被认为是自动检测的候选类。
  其他类级注释也可以看作是标识组件，通常是一种特殊的组件。比如@Repository注解或AspectJ's的 @Aspect注解
  /** 该值可能表示逻辑组件名称的建议，在自动检测组件的情况下，转换成一个Spring bean */
  String value() default "";
  
@PropertySource 
  注册Properties文件里面的key和value到某个PropertyClass里面。我DruidProperties 声明字段，ProdProfile去Autowired，发现
    DruidProperties 注解为@PropertySource("classpath:config/sersver.properties")
    DruidPropertiesDev 注解为 DruidPropertiesDev
    而上面ProdProfile 的property始终为dev的值。我试图通过互联网引擎搜索答案，无奈，没有。我只有读源码，结果源码英文注释写得很清楚，
    通过扫描，如果a.pro和b.pro里面有重复值，那么哪个后注册的就win或者重写，这里我的DruidPropertiesDev类在后面，而server和dev 属性文件的key值都一样
    所以，dev把server覆盖了。
    
@Bean
  翻译注释：
      表明一个方法产生一个bean,并且交由Spring容器管理
      概览
      这个注解的所有属性的名字和语义是有意和Spring XML 的那些bean标签相同的，例如：
      @Bean
      public MyBean myBean() {
        // instantiate and configure MyBean obj
        return obj;
      }
      Bean 的名称（复数）
      当一个name属性是有效的，默认的策略就是用@Bean方法的名字来决定Bean的名字。这是方便和直观的，但如果明确要求一个名字的话，这个name属性（或者它的
      value别名（复数））可能被使用。同时注意这个name接受一个字符数组，允许多个名字。 （也就是说一个主bean 名+一个或多个别名）来作为一个单例bean.
      @Bean({"b1", "b2"}) // bean available as 'b1' and 'b2', but not 'myBean'
      public MyBean myBean() {
        // instantiate and configure MyBean obj
        return obj;
      }
      范围，依赖，主要，懒  （Scope,Depends,Primary,Lazy）
      注意，这个Bean注解不提供Scope,Depends,Primary,Lazy的属性，要想实现这些属性，就必须联合Scope,Depends,Primary,Lazy来实现。比如：
        @Bean
        @Scope("prototype")
        public MyBean myBean() {
            // instantiate and configure MyBean obj
            return obj;
        }
        @Configuration 类里面的@Bean方法
        通常，@Bean是在@Configuration类中声明的。在这种情况下，bean方法在本类中直接引用其它的@Bean方法。这样就保证beans之间的引用是健壮的类型和可
        操作性的。因此这些被叫做“内部bean引用”保证了切面范围和AOP含义，就像getBean()去查找。这些是最初的“Spring JavaConfig”项目中已知的语义，
        该项目需要在运行时对每个配置类进行CGLIB子类化。因此，作为一个结果， @Configuration类和它的工厂方法不能够标记为final和private.例如：
        @Configuration
        public class AppConfig {

            &#064;Bean
            public FooService fooService() {
                return new FooService(fooRepository());
            }

            &#064;Bean
            public FooRepository fooRepository() {
                return new JdbcFooRepository(dataSource());
            }

            // ...
        }
        @Bean 的Lite模式
       @Bean方法也有可能声明在没有注解@Configuration的类里面，比如说，@Bean方法可能声明在@Component类里面或者在一个普通的类里面。这种情况，
       @Bean方法将被叫做‘Lite’模式来处理。@Bean方法在lite模式下将被容器当成工厂方法来处理，就像XML里面声明的factory-method一样。恰当的应用于
       范围和声明周期的回调中。在本例中，包含类仍然未被修改，并且对于包含类或工厂方法没有不寻常的约束。
       
       与在@Configuration类里面的@Bean方法相反，'inter-bean references' 在Lite模式下不被支持。相反，在Lite模式下一个@Bean方法调用另一个@Bean
       方法，这个调用就是标准的Java方法调用，Spring不会通过CGLIB 代理来阻止这个调用，这就好比代理模式下的@Transactional调用，Spring不会阻止这个
       调用。Spring只在AspectJ 模式下干那些事。
       &#064;Component
        public class Calculator {
            public int sum(int a, int b) {
                return a+b;
            }

            &#064;Bean
            public MyBean myBean() {
                return new MyBean();
            }
        }
        
        Bootstrapping
       参阅@Configuration的Javadoc 的详细信息，包含怎样去引导容器使用AnnotationConfigApplicationContext 和它的friends.
       BeanFactoryPostProcessor 返回了一个@Bean 方法。
       必须特别考虑@Bean方法返回org.springframework.beans.factory.config.BeanFactoryPostProcessor BeanFactoryPostProcessor类（简称BFPP）.
       因为BFPP对象在容器的生命周期里会被更早的实例化，他们能够干扰@Configuration类里一些注解的加工，比如@Autowired、@Value、@PostConstruct，
       为了避免这些生命周期的问题，需要标记BFPP 的返回@Bean方法为static. 比如：
       &#064;Bean
        public static PropertyPlaceholderConfigurer ppc() {
            // instantiate, configure and return ppc ...
        }
        通过标记方法为static，不需要实例化它声明的@Configuration类就可以调用，这样就避免了上面提到的生命周期冲突问题。注意，无论static Bean
        方法将不在域和AOP语义中增强。这在BFPP情况下是可行的，因为它们通常不被其它的@Bean方法调用。作为提醒，一个WARN-level级别的日志信息将
        被告知对于那些非static的@Bean方法返回BeanFactoryPostProcessor及它子类。
        
        /**name的别名，打算用在当不需要其它attributes时，例如@Bean("customBeanName")*/
        // 翻看了一下AliasFor的作用，第一句描述是：is an annotation that is used to declare aliases for annotation attributes
        // 说明AliasFor注解是用来为注解的attributes取别名的。
        // 下面这句应该是@Bean("value")来代替@Bean(value="name") 
        @AliasFor("name")
	      String[] value() default {};
        
        /**这个bean的名字，或者如果有多个name,一个主bean name + 其它别名
         * 如果未指定，这个bean的name是这个被注解的方法的名字。 如果指定，这个方法的名字将被忽略。
         * 这个bean的名字和别名也可以通过value属性来配置，前提是没有其它属性声明。
        */
        @AliasFor("value")
	      String[] name() default {};
        
        @Configuration 
        翻译注释：
        表明一个类声明了一个或者多个@Bean方法，并且Spring容器在运行时将处理这些被标记的方法，然后生成对应的Bean和Service requests
         &#064;Configuration
         public class AppConfig {

             &#064;Bean
             public MyBean myBean() {
                 // instantiate, configure and return bean ...
             }
         }
         引导@Configuration类
         通过AnnotationConfigApplicationContext
          @Configuration类的引导，通常不是AnnotationConfigApplicationContext就是它web-capable的变种AnnotationConfigWebApplicationContext，
          下面是关于前者的一个简单示例：
          AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
          ctx.register(AppConfig.class);
          ctx.refresh();
          MyBean myBean = ctx.getBean(MyBean.class);
          // use myBean ...
          
          参阅AnnotationConfigApplicationContext 的Javadoc详细文档说明，和查看AnnotationConfigWebApplicationContext for web.xml的配置说明。
          通过Spring <beans> XML
          作为一个直接注册@Configuration类的替代类AnnotationConfigApplicationContext，在Spring XML文件里，@Configuration类可能被声明为普通
          的<bean> 定义，如下：
          <beans>
             <context:annotation-config/>
             <bean class="com.acme.AppConfig"/>
          </beans>
           在上面的例子里，为了让ConfigurationClassPostProcessor有效，并且其他与注释相关的post处理器，便于处理@Configuration类，                          <context:annotation-config/>标签是必需的。
           
           Via component scanning
           @Configuration的元注解是@Component，因此@Configuration类是容器扫描的候选（通常用Spring XML 的<context:component-scan/>元素），
           也因此会给@Autowired/@Inject带来优势，就像其它的常规的@Component注解一样。个别的，如果一个构造函数出现在自动装配的语法中，那么讲被
           透明的应用：
           
            public class AppConfig {
               private final SomeBean someBean;

               public AppConfig(SomeBean someBean) {
                   this.someBean = someBean;
               }

               // &#064;Bean definition using "SomeBean"

           }
           @Configuration类不仅仅用容器扫描做引导，也可能用它们自己的configure容器扫描，例如@ComponentScan注解：
            @Configuration
            @ComponentScan("com.acme.app.services")
             public class AppConfig {
                 // various &#064;Bean definitions ...
             }
          参阅@ComponentScan的Javadoc文档for details
          
          使用外部化的值
          用Environment 的API
          通过注入Spring Environment 到一个@Configuration类，可用外化的值，比如：用@Autowired注解
          @Configuration
          public class AppConfig {

              @Autowired Environment env;

              @Bean
              public MyBean myBean() {
                  MyBean myBean = new MyBean();
                  myBean.setName(env.getProperty("bean.name"));
                  return myBean;
              }
          }
          
          通过Environment对Properties文件的解析，存在于一个或多个property source 对象，并且@Configuration会用@PropertySources注解
          贡献property sources给Environment对象
          @Configuration
          @PropertySource("classpath:/com/acme/app.properties")
          public class AppConfig {

              @Inject Environment env;

              @Bean
              public MyBean myBean() {
                  return new MyBean(env.getProperty("bean.name"));
              }
          }
          参考org.springframework.core.env.Environment和@PropertySource 获得详情
          
          Using the {@code @Value} annotation
          外化的值可能运用@Value注解'wired into'到@Configuration类，比如：
          @Configuration
          @PropertySource("classpath:/com/acme/app.properties")
          public class AppConfig {

              @Value("${bean.name}") String beanName;

              @Bean
              public MyBean myBean() {
                  return new MyBean(beanName);
              }
          }
          这个方法经常被用到，通过使用Spring 的 org.springframework.context.support.PropertySourcesPlaceholderConfigurer，通常通过用XML的
          <context:property-placeholder/>元素生效。查看下面关于Spring XML 使用@ImportResource的@Configuration类的部分，参考@Value的Javadoc
          并且参考@Bean的细节，关于BeanFactoryPostProcessor类例如PropertySourcesPlaceholderConfigurer。
          
          组成@Configuration类
          With the {@code @Import} annotation
          @Configuration类maybe用@Import注解组成，而不像Spring XML 里<import>的工作方式。因为@Configuration对象在容器里面被当成Spring beans,
          maybe 通过平常的方式注入这些导入的配置，比如用构造器方式注入：
          @Configuration
          public class DatabaseConfig {

              @Bean
              public DataSource dataSource() {
                  // instantiate, configure and return DataSource
              }
          }

          @Configuration
          @Import(DatabaseConfig.class)
          public class AppConfig {

              private final DatabaseConfig dataConfig;

              public AppConfig(DatabaseConfig dataConfig) {
                  this.dataConfig = dataConfig;
              }

              @Bean
              public MyBean myBean() {
                  // reference the dataSource() bean method
                  return new MyBean(dataConfig.dataSource());
              }
          }
          现在，包括AppConfig和DatabaseConfig都能被引导通过仅注册AppConfig到Spring context中：
          new AnnotationConfigApplicationContext(AppConfig.class);
          
          With the {@code @Profile} annotation
          @Configuration类maybe标记@Profile注解去表明它们能够处理 一个或多个profile状态为active的文件：
          @Profile("embedded")
          @Configuration
          public class EmbeddedDatabaseConfig {

              @Bean
              public DataSource dataSource() {
                  // instantiate, configure and return embedded DataSource
              }
          }

          @Profile("production")
          @Configuration
          public class ProductionDatabaseConfig {

              @Bean
              public DataSource dataSource() {
                  // instantiate, configure and return production DataSource
              }
          }
          参考@Profile和Environment查看详情。
          
          With Spring XML using the {@code @ImportResource} annotation
          就像上面提及的， @Configuration类可以声明为常规的Spring <bean> 定义在Spring XML文件里，它也可以导入Spring XML 配置文件到                       @Configuration类里，通过@ImportResource注解。从XML中导入Bean的定义可以用平常的方式注入，例如用@Inject注解：
          @Configuration
          @mportResource("classpath:/com/acme/database-config.xml")
          public class AppConfig {

              @Inject DataSource dataSource; // from XML

              @Bean
              public MyBean myBean() {
                  // inject the XML-defined dataSource bean
                  return new MyBean(this.dataSource);
              }
          }
          
          With nested {@code @Configuration} classes
          @Configuration将被嵌套在一个其它的，比如下面：
          @Configuration
          public class AppConfig {

              @Inject DataSource dataSource;

              @Bean
              public MyBean myBean() {
                  return new MyBean(dataSource);
              }

              @Configuration
              static class DatabaseConfig {
                  @Bean
                  DataSource dataSource() {
                      return new EmbeddedDatabaseBuilder().build();
                  }
              }
          }
          
          当引导一个比如是有布置的，仅仅注册AppConfig在Spring的上下文就可以了。这个嵌套@Configuration类的优势在于，DatabaseConfig将会自动的
          被注册。这就避免了用@Import注解当AppConfig和DatabaseConfig的关系已经隐式地清晰【晦涩啊】。
          注意，嵌套的@Configuration类习惯于用@Profile注解为同一个Bean提供两个选项给封闭的@Configuration类
          
          Configuring lazy initialization
          默认情况下，容器在bootstrap时间里 ，@Bean方法将是急于被实例化。为了避免这种情况，@Configuration将和@Lazy注解一起使用来指示所有声明
          在类里的@bean方法默认通过懒加载来实例化。注意，@Lazy注解maybe用在个别的@Bean方法上。
          
          Testing support for {@code @Configuration} classes
          Spring 的TestContext framework在spring-test模式下才是有效的，它提供了@ContextConfiguration注解，该注解用在Spring 3.1版本，并能够
          接受@Configuration类的数组形式，例如：
          @RunWith(SpringJUnit4ClassRunner.class)
          @ContextConfiguration(classes={AppConfig.class, DatabaseConfig.class})
          public class MyTests {

              @Autowired MyBean myBean;

              @Autowired DataSource dataSource;

              @Test
              public void test() {
                  // assertions against myBean ...
              }
          }
          参考TestContext framework reference documentation for details
          
          添加@Enable注解可以具有内置的Spring 特点，
          Spring 的特点比如说异步方法的执行，跑批任务的执行，注解事务管理，甚至SpringMVC也能够通过@Configuring配置具有相关能力，通过运用
	  它们各自的Enable注解，查看
	   {@link org.springframework.scheduling.annotation.EnableAsync @EnableAsync},
 	   {@link org.springframework.scheduling.annotation.EnableScheduling @EnableScheduling},
 	   {@link org.springframework.transaction.annotation.EnableTransactionManagement @EnableTransactionManagement},
 	   {@link org.springframework.context.annotation.EnableAspectJAutoProxy @EnableAspectJAutoProxy},
 	   and {@link org.springframework.web.servlet.config.annotation.EnableWebMvc @EnableWebMvc}
	   的详情
	   
	    @Configuration类的约束
	    1.@Configuration 必须是 non-final
	    2.@Configuration 必须是 non-local(不能声明在方法中)
	    3.嵌套的@Configuration类必须是 static
	  /**明确的指定这个Spring bean定义的名字关联这个Configuration类，如果未指定（普通情况），一个bean名称将自动生成。
	  *  如果这个Configuration类是通过组件扫描或者直接供给一个AnnotationConfigApplicationContext获得，自定义名称才被应用。
	  *  如果这个Configuration类被看作一个传统的XML bean定义，这个bean 的name/id 将优先
	  *  @return  指定的bean name,如果有的话
	  */
	    String value() default "";
