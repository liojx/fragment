项目中用到的注解
@EnableWebSocketMessageBroker
用于开启使用STOMP协议来传输基于代理（MessageBroker）的消息，这时候控制器（controller）开始支持@MessageMapping,就像是使用@requestMapping一样。
@Controller
使用@Controller 注解，在对应的方法上，视图解析器可以解析return 的jsp,html页面，并且跳转到相应页面。
若返回json等内容到页面，则需要加@ResponseBody注解。
@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。
如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面，或者html。
配置的视图解析器 InternalResourceViewResolver不起作用，返回的内容就是Return 里的内容。
如果需要返回到指定页面，则需要用 @Controller配合视图解析器InternalResourceViewResolver才行。
如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。
@MessageMapping
@Column
映射java字段和数据库表字段
@After
spring aop中@Around @Before @After三个注解的区别
@Before是在所拦截方法执行之前执行一段逻辑。
@After 是在所拦截方法执行之后执行一段逻辑。
@Around是可以同时在所拦截方法的前后执行一段逻辑。
@ControllerAdvice
@MapperScan
@MessageExceptionHandler
@PostMapping
@PostConstruct
@SuppressWarnings
@Value
@ConditionalOnProperty
@EnableRedisHttpSession
@Service
@Signature
@AutoConfigureBefore
@EnableScheduling
@Async
@SpringBootApplication
@ConditionalOnClass
@RabbitListener
@Override
@Deprecated
@Transient
@RestController
@RequestBody
@SendToUser
@Pointcut
execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern)throws-pattern?)
returning type pattern,name pattern, and parameters pattern是必须的.
ret-type-pattern:可以为*表示任何返回值,全路径的类名等.
name-pattern:指定方法名,*代表所有,set*,代表以set开头的所有方法.
parameters pattern:指定方法参数(声明的类型),(..)代表所有参数,(*)代表一个参数,(*,String)代表第一个参数为任何值,第二个为String类型.
修饰符匹配（modifier-pattern?）
返回值匹配（ret-type-pattern）可以为*表示任何返回值,全路径的类名等
类路径匹配（declaring-type-pattern?）
方法名匹配（name-pattern）可以指定方法名 或者 *代表所有, set* 代表以set开头的所有方法
参数匹配（(param-pattern)）可以指定具体的参数类型，多个参数间用“,”隔开，各个参数也可以用“*”来表示匹配任意类型的参数，如(String)表示匹配一个String参数的方法；(*,String) 表示匹配有两个参数的方法，第一个参数可以是任意类型，而第二个参数是String类型；可以用(..)表示零个或多个任意参数
异常类型匹配（throws-pattern?）
其中后面跟着“?”的是可选项

（1）切入点  Pointcut
  在介绍Pointcut之前，有必要先介绍  Join  Point（连接点）概念。
  连接点：程序运行中的某个阶段点，比如方法的调用、异常的抛出等。比如方法doSome();　　　　　　　　　
Pointcut是JoinPoint的集合，它是程序中需要注入Advice 的位置的集合，指明Advice要在什么样的条件下才能被触发。               　　　 org.springframework.aop.Pointcut接口用来指定到特定的类和方法。
（2）通知Advice
它是某个连接点所采用的处理逻辑，也就是向连接点注入的代码。例如：输出的日志信息   就是一个Advice
（3）Advisor
Advisor是Pointcut和Advice的配置器，它包括Pointcut和Advice，是将Advice注入程序中Pointcut位置的代码

@ResponseBody
@GeneratedValue
@EnableApolloConfig
@ImportResource
@Before
@Bean
@Aspect
@WebAppConfiguration
@ContextConfiguration
@Component
@DwTypeResolver
@GetMapping
@Resource
@Configuration
@EnableAsync
@ExceptionHandler
@Around
@SpringBootTest
@Test
@Transactional
@JSONField
@Param
@EnableConfigurationProperties
@Table
@Repository
@ConfigurationProperties
@Autowired
@RabbitHandler
@RequestMapping
@ConditionalOnMissingBean
@Scheduled
@RunWith
@Id
个人理解注解
@Retention和@Target两个注解
@Retention说明该注解类的生命周期
SOURCE: 表明之保留在源文件中
CLASS：表明保留在class文件中，一旦加载到JVM就被丢弃
RUNTIME：注解保留在程序运行期，此时可通过反射获得定义在某个类上的所有注解

@Target表明注解被声明在那些类之前
TYPE: 注解只能声明在类上
FIELD：注解声明在一个字段之前
METHOD：注解声明在一个方法之前
PARAMETER: 注解声明在一个参数之前
CONSTRUCTOR: 注解声明在一个构造方法之前
LOCAL_VARIABLE：说明该注解只能声明在一个局部变量前
ANNOTATION_TYPE：说明该注解只能声明在一个注解类型前
PACKAGE：说明该注解只能声明在一个包名前
